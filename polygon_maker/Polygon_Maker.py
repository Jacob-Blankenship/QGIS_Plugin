# -*- coding: utf-8 -*-
"""
/***************************************************************************
 Polygon_Maker
                                 A QGIS plugin
 Creates polygons in a grid formate
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2018-06-12
        git sha              : $Format:%H$
        copyright            : (C) 2018 by Jacob Blankeship
        email                : JBlankenship@wilburellis.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from PyQt5.QtCore import QSettings, QTranslator, QVariant, QCoreApplication
from PyQt5.QtGui import QIcon
from PyQt5.QtWidgets import QAction, QFileDialog
from qgis.core import *
from qgis.core import QgsField

# Initialize Qt resources from file resources.py
# from .resources import *
# Import the code for the dialog
from .Polygon_Maker_dialog import Polygon_MakerDialog
import os.path


class Polygon_Maker:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'Polygon_Maker_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)

            if QVariant() > '4.3.3':
                QCoreApplication.installTranslator(self.translator)

        # Create the dialog (after translation) and keep reference
        self.dlg = Polygon_MakerDialog()

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Polygon_Maker')
        self.toolbar = self.iface.addToolBar(u'Polygon_Maker')
        self.toolbar.setObjectName(u'Polygon_Maker')

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('Polygon_Maker', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/Polygon_Maker/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Polygon Maker'),
            callback=self.run,
            parent=self.iface.mainWindow())
        self.dlg.In_Vector_tb.clicked.connect(self.openVector)
        self.loadVectors()
        self.load_N__S()
        self.load_E__W()
        self.N__S_direction()
        self.E__W_direction()


    def loadVectors(self):
        self.dlg.In_Vector_cb.clear()
        layers = [layer for layer in QgsProject.instance().mapLayers().values()]
        vector_layers = []
        for layer in layers:
            if layer.type() == QgsMapLayer.VectorLayer:
                vector_layers.append(layer.name())
        self.dlg.In_Vector_cb.addItems(vector_layers)

    def load_N__S(self):
        self.dlg.North_South_cb.clear()
        vector_layers = ["North","South"]
        self.dlg.North_South_cb.addItems(vector_layers)

    def load_E__W(self):
        self.dlg.East_West_cb.clear()
        vector_layers = ["East", "West"]
        self.dlg.East_West_cb.addItems(vector_layers)

    def N__S_direction(self):
        self.dlg.Angle_direction_N__S.clear()
        vector_layers = ["None", "North", "South"]
        self.dlg.Angle_direction_N__S.addItems(vector_layers)

    def E__W_direction(self):
        self.dlg.Angle_direction_E__W.clear()
        vector_layers = ["None", "East", "West"]
        self.dlg.Angle_direction_E__W.addItems(vector_layers)

    def openVector(self):
        inFile = str(QFileDialog.getOpenFileName(caption="Open shapefile", filter="Shapefiles (*.shp)")[0])
        if inFile is not None:
            self.iface.addVectorLayer(inFile, str.split(os.path.basename(inFile), ".")[0], "ogr")
            self.loadVectors()

    def getVectorLayer(self):
        layer = None
        layername = self.dlg.In_Vector_cb.currentText()
        for lyr in QgsProject.instance().mapLayers().values():
            if lyr.name() == layername:
                layer = lyr
                break
        return layer

    def setVariables(self):
        self.inVector = self.getVectorLayer()
        self.Num_row = self.dlg.Num_rows.value()
        self.Distance_row = self.dlg.Distance_rows.value()
        self.Num_column = self.dlg.Num_columns.value()
        self.Distance_column = self.dlg.Distance_columns.value()
        self.N__S = self.dlg.North_South_cb.currentText()
        self.E__W = self.dlg.East_West_cb.currentText()
        self.N__S_D = self.dlg.Angle_direction_N__S.currentText()
        self.E__W_D = self.dlg.Angle_direction_E__W.currentText()
        self.Date = self.dlg.Date_1.text()
        self.Study_Type = self.dlg.Study_type.text()
        self.Trial_Num = self.dlg.Trial_Number.text()
        self.Plot_Num = self.dlg.Plot_Number_L.toPlainText()


    def Create_fields(self, layer):

        list_fields = []

        for field in layer.fields():
            field_id = field.name()
            list_fields.append(field_id)

        # Adding fields to shapefile

        if len(list_fields) == 1:
            res = layer.dataProvider().addAttributes([
                QgsField("Avg_NDVI", QVariant.Double),
                QgsField("Date", QVariant.Date),
                QgsField("Study_Type", QVariant.Int),
                QgsField("Trial_Num", QVariant.Int),
                QgsField("Plot_Num", QVariant.Int),
                QgsField("Trt", QVariant.Int),
                QgsField("Rep", QVariant.Int)])
        layer.commitChanges()

    def Update_Attribute_Values(self, layer, Date, Study_Type, Trial_Num, Plot_num):
        # Update_Attribute_Values("2018-06-04",6031,1802,Plot_Num)

        num = 0

        feats = layer.getFeatures()

        layer.startEditing()
        for feat in feats:
            layer.changeAttributeValue(feat.id(), 0, num)
            layer.changeAttributeValue(feat.id(), 2, Date)
            layer.changeAttributeValue(feat.id(), 3, Study_Type)
            layer.changeAttributeValue(feat.id(), 4, Trial_Num)
            layer.changeAttributeValue(feat.id(), 5, Plot_num[num])
            Plot_str = str(Plot_num[num])
            layer.changeAttributeValue(feat.id(), 7, Plot_str[0])
            print("Running", num)
            num += 1

        layer.commitChanges()

        layer.updateFields()


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Polygon_Maker'),
                action)
            self.iface.removeToolBarIcon(action)
        # remove the toolbar
        del self.toolbar


    def run(self):
        """Run method that performs all the real work"""
        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            self.setVariables()
            layer = self.inVector

            times_x = 0
            times_y = 0
            num1 = 0

            print("Starting")

            # number of columns for the grid
            while num1 <= self.Num_column-1:
                print("Big loop", num1)
                num2 = 0
                num3 = 0


                # gives the direction of the grid
                if self.N__S == "North":
                    x2 = -self.Distance_column + times_x
                    time_c = -self.Distance_column
                else:
                    x2 = self.Distance_column + times_x
                    time_c = self.Distance_column

                if self.E__W == "East":
                    y1 = -self.Distance_row
                else:
                    y1 = self.Distance_row


                y2 = 0
                # get the coordinates from the first polygon
                for i in layer.getFeatures():
                    geom = i.geometry()
                    Polygon_cor = geom.asMultiPolygon()
                    Point_1_x = Polygon_cor[0][0][0][0]
                    Point_1_y = Polygon_cor[0][0][0][1]

                    Point_2_x = Polygon_cor[0][0][1][0]
                    Point_2_y = Polygon_cor[0][0][1][1]

                    Point_3_x = Polygon_cor[0][0][2][0]
                    Point_3_y = Polygon_cor[0][0][2][1]

                    Point_4_x = Polygon_cor[0][0][3][0]
                    Point_4_y = Polygon_cor[0][0][3][1]

                    break
                # sets angle adjustment for East West
                if self.E__W_D == "None":
                    diff_x = 0
                elif self.E__W_D == "East":
                    diff_x = Point_4_x - Point_1_x
                else:
                    diff_x = Point_1_x-Point_4_x
                # sets angle adjustment for north south
                if self.N__S_D == "None":
                    diff_y = 0
                elif self.N__S_D == "North":
                    diff_y = Point_1_y - Point_2_y
                else:
                    diff_y = Point_2_y - Point_1_y
                print("Reset")



                x1 = diff_x
                y2 = diff_y

                # makes the columns
                if num1 > 0:
                    while num3 < 1:

                        Point_1_x = Point_1_x + x2
                        Point_1_y = Point_1_y + (y2 * num1)
                        Point_2_x = Point_2_x + x2
                        Point_2_y = Point_2_y + (y2 * num1)
                        Point_3_x = Point_3_x + x2
                        Point_3_y = Point_3_y + (y2 * num1)
                        Point_4_x = Point_4_x + x2
                        Point_4_y = Point_4_y + (y2 * num1)
                        print("Done R", num3)
                        times_x += time_c
                        num3 += 1
                        # makes polygons
                        prov = layer.dataProvider()
                        points = [QgsPointXY(Point_1_x, Point_1_y), QgsPointXY(Point_2_x, Point_2_y),
                                  QgsPointXY(Point_3_x, Point_3_y), QgsPointXY(Point_4_x, Point_4_y)]

                        feat = QgsFeature()
                        feat.setGeometry(QgsGeometry.fromPolygonXY([points]))
                        prov.addFeatures([feat])

                        layer.updateExtents()

                # makes the rows
                while num2 < self.Num_row-1:
                    num2 += 1
                    Point_1_x = Point_1_x + x1
                    Point_1_y = Point_1_y + y1
                    Point_2_x = Point_2_x + x1
                    Point_2_y = Point_2_y + y1
                    Point_3_x = Point_3_x + x1
                    Point_3_y = Point_3_y + y1
                    Point_4_x = Point_4_x + x1
                    Point_4_y = Point_4_y + y1
                    print("Done C", num2)

                    times_y += 1

                    # makes polygons
                    prov = layer.dataProvider()
                    points = [QgsPointXY(Point_1_x, Point_1_y), QgsPointXY(Point_2_x, Point_2_y),
                              QgsPointXY(Point_3_x, Point_3_y), QgsPointXY(Point_4_x, Point_4_y)]

                    feat = QgsFeature()
                    feat.setGeometry(QgsGeometry.fromPolygonXY([points]))
                    prov.addFeatures([feat])

                    layer.updateExtents()

                num1 += 1

            num5 = 0
            num6 = 0
            num7 = 3
            Plot_num = []
            while self.Plot_Num.count(',')+1 > num5:
                Plot_num.append(int(self.Plot_Num[num6:num7]))
                num6 += 4
                num7 += 4
                num5 += 1

            print(Plot_num)
            self.Create_fields(layer)
            self. Update_Attribute_Values(self.inVector, self.Date, self.Study_Type, self.Trial_Num, Plot_num)
            print("finshed")
